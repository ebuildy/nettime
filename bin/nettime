#!/usr/bin/env node

const commander = require('commander')
const nettime = require('..')
const { version, description } = require('../package.json')
const {
  computeAverageDurations, createTimingsFromDurations
} = require('../lib/timings')
const printTimings = require('../lib/printer')
const readlineSync = require('readline-sync')

commander
  .version(version)
  .description(description)
  .usage('[options] <URL>')
  .option('-0, --http1.0', 'use HTTP 1.0')
  .option('--http1.1', 'use HTTP 1.1 (default)')
  .option('--http2', 'use HTTP 2')
  .option('-c, --connect-timeout <ms>', 'maximum time to wait for a connection', totInteger)
  .option('-d, --data <data>', 'data to be sent using the POST verb')
  .option('-f, --format <format>', 'set output format: text, json, raw')
  .option('-H, --header <header>', 'send specific HTTP header', collect, [])
  .option('-i, --include', 'include response headers in the output')
  .option('-I, --head', 'use HEAD verb to get document info only')
  .option('-k, --insecure', 'ignore certificate errors')
  .option('-o, --output <file>', 'write the received data to a file')
  .option('-t, --time-unit <unit>', 'set time unit: ms, s+ns')
  .option('-u, --user <credentials>', 'credentials for Basic Authentication')
  .option('-X, --request <verb>', 'specify HTTP verb to use for the request')
  .option('-C, --request-count <count>', 'count of requests to make', totInteger, 1)
  .option('-D, --request-delay <ms>', 'delay between two requests', totInteger, 100)
  .option('-A, --average-timings', 'print an average of multiple request timings')
  .on('--help', () => {
    console.log()
    console.log('  The default output format is "text" and time unit "ms". Other options')
    console.log('  are compatible with curl. Timings are printed to the standard output.')
    console.log()
    console.log('  Examples:')
    console.log()
    console.log('    $ nettime https://www.github.com')
    console.log('    $ nettime -f json https://www.gitlab.com')
    console.log('    $ nettime --http2 -C 3 -A https://www.google.com')
  })
  .parse(process.argv)

const url = commander.args[0]
if (!url) {
  commander.help()
}

const options = commander.opts()
const timeUnit = options.timeUnit || 'ms'
if (['ms', 's+ns'].indexOf(timeUnit) < 0) {
  console.error(`Invalid time unit: "${timeUnit}". Valid values are "ms", and "s+ns".`)
  process.exit(1)
}

const formatters = {
  json: result => {
    if (timeUnit !== 's+ns') {
      convertToMilliseconds(result.timings)
    }
    return result
  },
  raw: result => JSON.stringify(result),
  text: ({ timings, httpVersion, statusCode, statusMessage }) =>
    printTimings(timings, timeUnit) +
    `\nResponse: HTTP/${httpVersion} ${statusCode} ${statusMessage}`
}

const format = options.format || 'text'
const formatter = formatters[format]
if (!formatter) {
  console.error(`Invalid format: "${format}". Valid formats are "text", "json" and "raw".`)
  process.exit(1)
}

const headers = options.header.reduce((result, header) => {
  const colon = header.indexOf(':')
  if (colon > 0) {
    const name = header
      .substr(0, colon)
      .trim()
      .toLowerCase()
    const value = header
      .substr(colon + 1)
      .trim()
    result[name] = value
  }
  return result
}, {})

let credentials = options.user
if (credentials) {
  const colon = credentials.indexOf(':')
  let username, password
  if (colon > 0) {
    username = credentials.substr(0, colon)
    password = credentials.substr(colon + 1)
  } else {
    username = credentials
    password = readlineSync.question('Password: ', { hideEchoBack: true })
  }
  credentials = { username, password }
}

const {
  connectTimeout: timeout, data, head, include: includeHeaders, insecure,
  output: outputFile, request, requestCount, requestDelay, averageTimings
} = options
const httpVersion = options.http2 ? '2.0' : options['http1.0'] ? '1.0' : '1.1'
const method = request || (head ? 'HEAD' : data ? 'POST' : 'GET')
const failOnOutputFileError = false
const rejectUnauthorized = !insecure

nettime({
  httpVersion,
  method,
  url,
  credentials,
  headers,
  data,
  failOnOutputFileError,
  includeHeaders,
  outputFile,
  rejectUnauthorized,
  timeout,
  requestCount,
  requestDelay
})
  .then(results => {
    if (requestCount > 1) {
      if (averageTimings) {
        const result = computeAverageTimings(results)
        results = [result]
      }
    } else {
      results = [results]
    }
    return results
  })
  .then(results => {
    for (const result of results) {
      console.log(formatter(result))
      console.log()
    }
  })
  .catch(({ message }) => {
    console.error(message)
    process.exitCode = 1
  })

function collect (value, result) {
  result.push(value)
  return result
}

function totInteger (value) {
  return parseInt(value)
}

function convertToMilliseconds (timings) {
  const getMilliseconds = nettime.getMilliseconds
  for (const timing in timings) {
    timings[timing] = getMilliseconds(timings[timing])
  }
}

function computeAverageTimings (results) {
  checkStatusCodes()
  const timings = results.map(({ timings }) => timings)
  const averageDurations = computeAverageDurations(timings)
  return createAverageResult(results[0], averageDurations)

  function checkStatusCodes () {
    let firstStatusCode
    for (const { statusCode } of results) {
      if (firstStatusCode === undefined) {
        firstStatusCode = statusCode
      } else {
        if (firstStatusCode !== statusCode) {
          throw new Error(`Status code of the first request was ${firstStatusCode}, but ${statusCode} was received later.`)
        }
      }
    }
  }

  function createAverageResult (firstResult, averageDurations) {
    const { httpVersion, statusCode, statusMessage } = firstResult
    const timings = createTimingsFromDurations(averageDurations)
    return { timings, httpVersion, statusCode, statusMessage }
  }
}
